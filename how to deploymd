# How to Deploy Your Website

To deploy your website so you can share it with your friends, you have several options. Here are a few popular and straightforward methods:

## 1. GitHub Pages
GitHub Pages is a free service provided by GitHub that allows you to host static websites directly from a GitHub repository.

### Steps:
1. **Create a GitHub Repository:**
   - Go to GitHub and create a new repository.
   - Name your repository (e.g., `my-website`).

2. **Push Your Code to GitHub:**
   - Initialize a local Git repository in your project folder if you haven't already:
     ```sh
     git init
     ```
   - Add your files to the repository:
     ```sh
     git add .
     ```
   - Commit your changes:
     ```sh
     git commit -m "Initial commit"
     ```
   - Add the remote repository URL:
     ```sh
     git remote add origin https://github.com/your-username/my-website.git
     ```
   - Push your code to GitHub:
     ```sh
     git push -u origin main
     ```

3. **Enable GitHub Pages:**
   - Go to your repository on GitHub.
   - Click on **Settings**.
   - Scroll down to the **Pages** section.
   - Under **Source**, select the branch you want to deploy (e.g., `main`).
   - Click **Save**.

4. **Access Your Website:**
   - Your website will be available at `https://your-username.github.io/my-website/`.

## 2. Netlify
Netlify is a popular platform for deploying static websites. It offers a free tier with generous limits.

### Steps:
1. **Sign Up for Netlify:**
   - Go to Netlify and sign up for an account.

2. **Deploy Your Site:**
   - Click on **New site from Git**.
   - Connect your GitHub account and select the repository you want to deploy.
   - Follow the prompts to configure the build settings (for a static site, the default settings should work).
   - Click **Deploy site**.

3. **Access Your Website:**
   - Netlify will provide you with a URL where your site is hosted (e.g., `https://your-site-name.netlify.app`).


## How to Push a Commit and Changes to GitHub

### Steps:
1. **Make Changes to Your Project:**
   - Edit your files and make the necessary changes.

2. **Add the Changes to the Staging Area:**
   ```sh
   git add .
   ```

3. **Commit the Changes:**
   ```sh
   git commit -m "Describe your changes"
   ```

4. **Push the Changes to GitHub:**
   ```sh
   git push origin main
   ```

### Full Command Sequence
Here is the full sequence of commands you need to run:
```sh
git add .
git commit -m "Describe your changes"
git push origin main
```

### Explanation
- `git add .`: Adds all the changed files to the staging area.
- `git commit -m "Describe your changes"`: Commits the staged files with a descriptive message.
- `git push origin main`: Pushes your local `main` branch to the remote repository.

Run these commands in your terminal, and your changes will be successfully pushed to your GitHub repository.